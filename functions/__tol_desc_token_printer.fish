function __tol_desc_token_printer --description 'print info generated by tol_desc_token' --argument output
	set output $argv
    set -l outputcount (count $output)
    test $outputcount -gt 10
    and set output $output[1..10]
    test $outputcount -gt 0
    or return 1
    test "$output" != (test (count "$__tol_latest_token_desc") -gt 0; and echo "$__tol_latest_token_desc"; or echo 0)
    or return 0
    for i in (seq 1 $__tol_desc_last_count)
        tput dl1
    end #tput cuu1
    debug -- "outputcount is %s.   output is %s." $outputcount $output\n
    set -l curr (commandline)
    set -l pos (commandline -C) #tput ed #tput dl1 #hectic! #tput el1 
    set -l init
    tput setaf 24 
    if test $outputcount -eq 1
        set -l outputlen (string length -- $output[1]) #commandline -C 0 #tput hpa (math (tput col) - $outputlen - 3)
        debug "one line hit, length %s content %s" $outputlen $output[1] #commandline $output[1] #echo -s -n $output[1]
        tput cud1
        tput hpa 0
        set init (echo -n -s $output[1]\n)
        tput smso
        echo -n -s (printf "%*s\n" (tput cols) $init)(tput rmso) #$output[1] #echoright $output[1] #commandline -f repaint #sleep 1
        #tput cuu1; move_back_lines 1 0
    else if test $outputcount -gt 1
        debug "many line hit %s" $outputcount #set -l IFS #commandline -C 0 #echo -n -s $output\n #set -l prompt 'printf "%s > \n " (set_color green) $output[1]'  #set -l right_prompt '' #set -l right_prompt 'printf "%s > " $output[1] '
        set init (echo -n -s $output\n) #[2..-1]\n) #set init $output[2..-1]
        echo -s $init\n >>~/.config/tolcrap/desc_output
        tput civis
        tput cud1

        set longeststring 0
        for i in (seq 1 (count $init))
            test (string length -- $init[$i]) -gt $longeststring
            and set longeststring (string length -- $init[$i])
            debug "longeststring %s" $longeststring
        end;    tput hpa 0 #(math (tput cols)-1) #this is why it was a line late... haha #(tput cols)
        #tput cuu1 #; printf "%*s\n" (tput cols) "$init[1]";  #printf "%*s%s\n" (tput cols) (set_color blue) "$init[1]"
        tput smso
        for line in $init #[2..-1]\n #debug "writing line: %s" $line
            #cprintf "%*s%s\n" (set_color brblue) (math (tput cols) - $outputlen) $line
            echo -n -s (printf "%*s\n" (tput cols) $line)(tput rmso)
        end
        #echoright $init[1] #echoright "";  #echoright $init[2..-1] 
        #tput cud1 #read --prompt "$prompt" --right-prompt "$right_prompt" -c (echoright $output[2..-1]) #set -e IFS
    end

    set -g __tol_read $init #set -g __tol_read 
    set -g __tol_desc_last_count (count $__tol_read)
    debug "num lines out: %s" $__tol_desc_last_count
    move_back_lines $__tol_desc_last_count 0 #(count $init) 0
    tput cnorm;  and commandline -f repaint #; tput rmso

    set -g __tol_latest_token_desc $output #set -g __tol_latest_token $token
end